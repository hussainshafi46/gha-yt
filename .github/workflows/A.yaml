name: Artists A

on:
  workflow_dispatch: # Allows manual triggering from the GitHub UI

permissions:
  contents: write  # Required for committing changes
  pull-requests: write  # Required for creating or updating pull requests


jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: main

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 lxml

    - name: Perform API requests and update data
      run: |
        python -c "
        import json
        import sys
        from requests import get
        from bs4 import BeautifulSoup
        
        initial = "A"
        
        with open(f"pages/{initial}.txt", 'r', encoding='utf-8')  as f:
        	pageNumber = int(f.read().strip())
        if pageNumber == 0:
        	print(f"COMPLETED FETCHING {initial}")
        	sys.exit(0)

        
        artists = {}
        try:
          with open(f"artists/{initial}.json", 'r', encoding='utf-8') as f:
          	artists |= json.load(f)
        except:
          pass
        
        while pageNumber:
        	print(f"Query Page ({initial}):", pageNumber)
        	try:
        		response = get(url=f'https://genius.com/artists-index/{initial}/all?page={pageNumber}')
        		print("Query Status:", response.status_code)
        		if response.status_code != 200:
        			break
        		soup = BeautifulSoup(response.content, 'lxml')
        		artist_lists = soup.find_all("ul", class_="artists_index_list")
        		for artist_list in artist_lists:
        			for list_item in artist_list.find_all("li"):
        				a_tag = list_item.find_next("a")
        				artists[a_tag.get_text(strip=True).strip()] = a_tag['href']
        		if soup.find("div", class_="pagination"):
        			pageNumber += 1
        		else:
        			pageNumber = 0
        	except Exception as e:
        		print(e)
        		break
        		
        with open(f"artists/{initial}.json", 'w', encoding='utf-8') as f:
        	json.dump(artists, f, indent=2)
        with open(f"pages/{initial}.txt", 'w', encoding='utf-8')  as f:
        	f.write(str(pageNumber))
        "
        
    - name: Create a new branch and commit changes
      run: |
        git config user.name 'github-actions'
        git config user.email 'github-actions@github.com'
        git add .
        git commit -m 'Update results'
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Create Pull Request
    #   uses: peter-evans/create-pull-request@v4
    #   with:
    #     title: 'Update API results'
    #     body: 'Automated update of API results.'
    #     base: main
    #     head: update-data-branch
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
